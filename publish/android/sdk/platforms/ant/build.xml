<?xml version="1.0" encoding="UTF-8"?>
<project name="yuenan" default="release" basedir=".">
	<property file="build.properties"/>
    <property file="ProjectHome.properties"/>
	<property environment="SystemVariable" />   
	
	<property name="jdk.home" value="${SystemVariable.Java_Home}" />
	<property name="android-home" value="D:\Android\sdk" />
	
	<property name="android-jar23" value="${android-home}\platforms\android-23\android.jar" />
	<property name="android.tools" value="${android-home}\build-tools\23.0.1" />
	<property name="apk.tools" value="${android-home}\tools" />	
	<property name="unityresdir" value="${basedir}\..\channel\app" />
	<!--<property name="gameresdir" value="${basedir}\..\..\..\..\..\res\android" />-->
		
	<!--需要修改的第三方依赖路劲-->
	<property name="channeldir" value="${basedir}\..\channel\yuenan" />	
	<property name="BuildConfg" value="${channeldir}\Plugin\libs\BuildConfg" />
    <property name="library-dir1" value="${channeldir}\Plugin\libs\FacebookSDK" />
    <property name="library-dir2" value="${channeldir}\Plugin\libs\google-play-services_lib" />
    <property name="library-dir3" value="${channeldir}\Plugin\libs\SDK568Play" />
	
    <!-- 生成R文件的相对目录 -->
    <property name="outdir-gen" value="gen" />
    <!-- 编译后的文件放置目录 -->
    <property name="outdir-bin" value="bin" />   
    <!-- 输出目录 -->
	<property name="outdir" value="dest" />
    <!-- 清单文件 -->
    <property name="manifest-xml" value="AndroidManifest.xml" />
    <!-- 源文件目录 -->
    <property name="resource-dir" value="res" />
    <property name="asset-dir" value="assets" />
    <property name="sidno" value="0" />
    <!-- java源文件目录 -->
    <property name="srcdir" value="src" />
    <property name="srcdir-ospath" value="${basedir}\${srcdir}" />
    <!-- 动态库so文件目录 -->
    <property name="library" value="libs" />
    <property name="library-ospath" value="${basedir}\${library}" />
    <!-- 生成class目录 -->
    <property name="outdir-classes" value="${outdir-bin}/classes" />
    <property name="outdir-classes-ospath" value="${basedir}\${outdir-classes}" />
    <!-- classes.dex相关变量 -->
    <property name="dex-file" value="classes.dex" />
    <property name="dex-path" value="${outdir-bin}/${dex-file}" />
    <property name="dex-ospath" value="${basedir}\${dex-path}" />
    <!-- 编译后的文件放置目录 -->
	<property name="outdir-bin" value="bin" />
    <!-- 经过aapt生成的资源包文件 -->
    <property name="resources-package" value="${outdir-bin}\resources.ap_" />
    <property name="resources-package-ospath" value="${basedir}\${resources-package}" />
    <!-- 未认证apk包 -->
    <property name="out-unsigned-package" value="${outdir}\${ant.project.name}_unsigned_${sidno}.apk" />
    <property name="out-unsigned-package-ospath" value="${basedir}\${out-unsigned-package}" />
    <!-- 证书文件 -->
    <property name="keystore-file" value="${keystore}" />
    <!-- 已认证apk包 -->
    <property name="out-signed-package" value="${outdir}/${ant.project.name}_SID_${sidno}.apk" />
    <property name="out-signed-package-ospath" value="${basedir}\${out-signed-package}" />
    <!-- 已优化apk包 -->
    <property name="zipalign-signed-package" value="${basedir}\${outdir}/${ant.project.name}_SID_${sidno}_zipalign.apk" />
    <!-- 输出路径的apk包 -->
    <property name="outdir-package" value="${basedir}\${outdir}/${ant.project.name}_release.apk" />
	<!-- 输出路径的apk包 -->
    <property name="web-outdir-package" value="${basedir}\web/${ant.project.name}_release.apk" />
    
    <!-- Tools -->
	<condition property="aapt" value="${android.tools}\aapt.exe" else="${android.tools}/aapt">
		<os family="windows" />
	</condition>
	<condition property="zipalign" value="${android.tools}/zipalign.exe" else="${apk.tools}/zipalign">
		<os family="windows" />
	</condition>
	<condition property="jarsigner" value="${jdk.home}/bin/jarsigner.exe" else="${jdk.home}/bin/jarsigner">
		<os family="windows" />
	</condition>
	<condition property="aidl" value="${android.tools}/aidl.exe" else="${android.tools}/aidl">
		<os family="windows" />
	</condition>
	<condition property="adb" value="${apk.tools}/adb.exe" else="${apk.tools}/adb">
		<os family="windows" />
	</condition>
	<condition property="dx" value="${android.tools}/dx.bat" else="${android.tools}/dx">
		<os family="windows" />
	</condition>
	<condition property="apk-builder" value="${apk.tools}/apkbuilder.bat" else="${apk.tools}/apkbuilder">
		<os family="windows" />
	</condition>
	<condition property="java" value="${jdk.home}/bin/java.exe" else="${jdk.home}/bin/java">
		<os family="windows" />
	</condition>
	
    <!-- 初始化工作 -->
    <target name="init">
        <echo>Initializing all output directories...</echo>
        <delete dir="${outdir-bin}" />
        <delete dir="${outdir}" />
        <delete dir="${outdir-gen}" />
		<!--
        <delete dir="${library-dir1}/bin" />
        <delete dir="${library-dir2}/bin" />
        <delete dir="${library-dir3}/bin" />
        <delete dir="${library-dir1}/gen" />
        <delete dir="${library-dir2}/gen" />
        <delete dir="${library-dir3}/gen" /> -->
        <mkdir dir="${outdir}" />  
        <mkdir dir="${outdir-gen}" />
        <mkdir dir="${outdir-bin}" />
		<!--
        <mkdir dir="${library-dir1}/bin" />
        <mkdir dir="${library-dir2}/bin" />
        <mkdir dir="${library-dir3}/bin" />
        <mkdir dir="${library-dir1}/gen" />
        <mkdir dir="${library-dir2}/gen" />
        <mkdir dir="${library-dir3}/gen" />   -->
        <mkdir dir="${outdir-classes}" />
    </target> 
	

    <!-- 根据工程中的资源文件生成R.java文件 -->
     <target name="GenRJAVA" depends="init">
        <echo>Generating R.java / Manifest.java from the resources...</echo>	
        <!-- 根据库应用中的资源文件生成R.java文件 -->
        <exec executable="${aapt}" failonerror="true" >
            <arg value="package" /><!-- package表示打包-->
            <arg value="-m" /><!--m,J,gen表示创建包名的目录和R.java到gen目录下 -->
            <arg value="-J" />
            <arg value="${outdir-gen}" />
            <arg value="-M" /><!-- M指定AndroidManifest.xml文件-->
            <arg value="${manifest-xml}" />

            <arg value="-S" /><!-- S指定res目录，生成对应的ID，可多个-->
            <arg value="${resource-dir}" />
			<arg value="-S" />
            <arg value="${unityresdir}/res" />
            <arg value="-S" />
            <arg value="${library-dir1}/res" /> <!--  注意点:同时需要调用Library的res-->
            <arg value="-S" />
            <arg value="${library-dir2}/res" /> 
            <arg value="-S" />
            <arg value="${library-dir3}/res" />
            <arg value="--extra-packages" />
            <arg value="com.facebook:com.google.android.gms:com568e.portal568play.sdk" />   
            <arg value="-I" /><!-- I指定android包的位置-->
            <arg value="${android-jar23}" />
            <arg value="--auto-add-overlay" /> <!-- 这个重要，覆盖资源，不然报错-->
        </exec>
    </target>
    
	<target name="copy" depends="GenRJAVA">
		<!-- 把缺少的BuildConfig复制进去，暂时不知道如何生成 -->
        <copy file="${BuildConfg}/FacebookSDK/BuildConfig.java" tofile="${outdir-gen}/com/facebook/BuildConfig.java">
             <filterset>
                <filter token="CONFIG.FROM" value="${package.from}"/>
           </filterset>
       </copy>
	    <copy file="${BuildConfg}/google-play-services_lib/BuildConfig.java" tofile="${outdir-gen}/com/google/android/gms/BuildConfig.java">
             <filterset>
                <filter token="CONFIG.FROM" value="${package.from}"/>
           </filterset>
       </copy>
	   <copy file="${BuildConfg}/SDK568Play/BuildConfig.java" tofile="${outdir-gen}/com568e/portal568play/sdk/BuildConfig.java">
             <filterset>
                <filter token="CONFIG.FROM" value="${package.from}"/>
           </filterset>
       </copy>
	</target>
	
	<!-- 将工程及库应用中的java源文件编译成class文件 -->
    <target name="compile" depends="copy">
       <echo>Compiling java source code...</echo>	
	   <javac encoding="UTF-8" destdir="${outdir-classes}" bootclasspath="${android-jar23}" source="1.7" target="1.7">
            <src path="${outdir-gen}" />
			<src path="${srcdir}" />
			<src path="${unityresdir}/src" />
			<src path="${channeldir}/src" />
			
			<src path="${library-dir1}/src" />
			<src path="${library-dir2}/src" />
			<src path="${library-dir3}/src" />
            <classpath>
				<fileset dir="${library-ospath}" includes="*.jar"/>
				<fileset dir="${unityresdir}/libs" includes="*.jar" />
				<fileset dir="${library-ospath}" includes="*.jar"/>			
				
				<fileset dir="${library-dir1}/libs" includes="*.jar" />
				<fileset dir="${library-dir2}/libs" includes="*.jar" />
				<fileset dir="${library-dir3}/libs" includes="*.jar" />
            </classpath> 
       </javac>	
    </target>
	
    <!-- 将.class文件转化成.dex文件 -->
    <target name="dex" depends="compile">
        <echo>Converting compiled files and external libraries into ${outdir-dx}test.dex...</echo>
        <exec executable="${dx}" failonerror="true">
            <arg value="--dex" />
            <arg value="--output=${dex-ospath}" /><!-- 输出 -->
            <arg path="${outdir-classes-ospath}" /><!-- classes文件位置 -->
			
			<arg value="${library-ospath}/ZWWXSDK.jar" /> <!-- 把libs下所有jar打包 -->
            <arg value="${unityresdir}/libs/*.jar" /> <!-- 把libs下所有jar打包 -->
			<arg value="${library-dir1}/libs/*.jar" /> <!-- 把libs下所有jar打包 -->
			<arg value="${library-dir2}/libs/*.jar" /> <!-- 把libs下所有jar打包 -->
			<arg value="${library-dir3}/libs/*.jar" /> <!-- 把libs下所有jar打包 -->
        </exec>
    </target>
	
    <!-- 打包res 和 assets资源文件 -->
    <target name="package-res-and-assets" depends="dex">
        <echo>Packaging resources and assets...</echo>
        <exec executable="${aapt}" failonerror="false" >
            <arg value="package" />
            <arg value="-f" /><!-- 资源覆盖重写 -->
            <arg value="-M" />
            <arg value="${manifest-xml}" />
			
			<!--打包res资源-->
            <arg value="-S" />
            <arg value="${resource-dir}" />
			<!--<arg value="-S" />
            <arg value="${channeldir}/Plugin/res" />-->
			<arg value="-S" />
            <arg value="${unityresdir}/res" />
            <arg value="-S"/>
            <arg value="${library-dir1}/res"/>
            <arg value="-S"/>
            <arg value="${library-dir2}/res"/>
            <arg value="-S"/>
            <arg value="${library-dir3}/res"/>
			
			<!--打包assets资源-->
            <arg value="-A" />
            <arg value="${asset-dir}" />
			<!--
			<arg value="-A" />
            <arg value="${channeldir}/Plugin/assets" />-->
			<arg value="-A" />
            <arg value="${unityresdir}/assets" />
			<!--<arg value="-A" />
            <arg value="${gameresdir}" />-->
			<arg value="-A" />
            <arg value="${library-dir1}/assets" />
			<arg value="-A" />
            <arg value="${library-dir2}/assets" />
			<arg value="-A" />
            <arg value="${library-dir3}/assets" />
			
            <arg value="-I" />
            <arg value="${android-jar23}" />
            <arg value="-F" /><!-- 输出资源压缩包 -->
            <arg value="${resources-package}" />
            <arg value="--auto-add-overlay" />
        </exec>
    </target>
	
    <!-- 打包未签名的apk -->
    <target name="package" depends="package-res-and-assets">
        <echo>Packaging unsigned apk for release...</echo>
        <exec executable="${apk-builder}" >
            <arg value="${out-unsigned-package-ospath}" /><!-- 输出 -->
            <arg value="-u" /><!-- u指创建未签名的包-->
            <arg value="-z" /><!-- 资源压缩包 -->
            <arg value="${resources-package-ospath}" />
            <arg value="-f" /><!-- dex文件 -->
            <arg value="${dex-ospath}" />
			
			<!-- 把libs下的jar库打包 -->
			<arg value="-rj"/>
            <arg value="${library-ospath}" />
			<arg value="-rj"/>
            <arg value="${unityresdir}/libs" />
			<arg value="-rj"/>
            <arg value="${library-dir1}/libs" />
			<arg value="-rj"/>
            <arg value="${library-dir2}/libs" />
			<arg value="-rj"/>
            <arg value="${library-dir3}/libs" />
			
			<!-- 把libs下的so库打包 -->
            <arg value="-nf"/>
            <arg value="${library-ospath}" />
			<arg value="-nf"/>
            <arg value="${unityresdir}/libs" />
			<arg value="-nf"/>
            <arg value="${library-dir1}/libs" />
			<arg value="-nf"/>
            <arg value="${library-dir2}/libs" />
			<arg value="-nf"/>
            <arg value="${library-dir3}/libs" />
        </exec>
        <echo>It will need to be signed with jarsigner before being published.</echo>
    </target>
    
    <!--apk进行签名-->
	<target name="jarsigner" depends="package">
		<echo message="准备进行签名" />
		<exec executable="${jarsigner}" failonerror="true">
			<arg value="-digestalg" />
			<arg value="SHA1" />
			<arg value="-sigalg" />
			<arg value="MD5withRSA" />
			<!--<arg value="-tsa" />
		    <arg value="https://timestamp.geotrust.com/tsa" />	-->
			<arg value="-storepass" />
			<arg value="f3f9be6df8a2327bf891b5235ec6101d" />
			<arg value="-keypass" />  
            <arg value="b8aa15f0ddac2b14a753b48c6367ec4f" /> 
			<arg value="-keystore" />
			<arg value="${basedir}\..\common\keystore\xgsdk.keystore" />
			<arg value="-signedjar" />
			<arg value="${out-signed-package-ospath}" />
			<arg value="${out-unsigned-package-ospath}" />
			<arg value="15515.keystore" />
		</exec>
		<echo message="签名成功" />
	</target>
	
    <!--apk优化 -->
    <target name="optimize-app" depends="jarsigner">
      <echo> optimizing the application...</echo>
      <exec executable="${zipalign}">
        <arg value="-v" />
        <arg value="-f" />
        <arg value="4" />
        <arg value="${out-signed-package-ospath}" />
        <arg value="${zipalign-signed-package}" />
     </exec>
    </target>
	
    <!--发布apk -->
    <target name="release" depends="optimize-app">
        <!-- 删除未签证apk -->
        <delete file="${out-unsigned-package-ospath}" />
        <echo>APK is released. path:${out-signed-package-ospath}</echo>
        <copy file="${zipalign-signed-package}" tofile="${outdir-package}"></copy>
        <!--<echo>APK is copy to path:${outdir-package}</echo>
		<copy file="${outdir-package}" tofile="${web-outdir-package}"></copy>-->
    </target>
	
	<record name="ant.log" loglevel="info" append="no" action="start"/>
</project>
